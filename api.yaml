openapi: 3.0.0
info:
  version: '1.0'
  title: 'LinkedIn API'
  description: 'LinkedIn API Design Document For CMPE-273'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/cmpe273-linkedin/linkedin/1.0
tags: 
  - name: recruiter
    description: Operations available to recruiters
  - name: applicant
    description: Operations available to applicants
  - name: users
    description: Everything about users
  - name: jobs
    description: Everything about jobs
  - name: search
    description: Everything about search
  - name: message
    description: Everything about message
paths: 
  /signup:
    post:
      tags:
        - recruiter
        - applicant
      summary: User signup
      description: Signup operation for applicant and recruiter
      responses:
        '200':
          description: successful signup
        '400':
          description: bad input parameter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
  /login:
    post:
      tags:
        - recruiter
        - applicant
      summary: User login
      description: Login operation for applicant and recruiter
      responses:
        '200':
          description: successful login
        '400':
          description: bad input parameter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  description: Email address
                  type: string
                password:
                  description: Password
                  type: string
              required:
                - username
                - password
  /jobs:
    get:
      tags:
        - jobs
        - recruiter
        - applicant
      summary: Get all jobs
      description: Get all jobs
      responses:
        '200':
          description: Jobs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
    post:
      tags:
        - jobs
        - recruiter
      summary: Create new job
      description: Recruiter can post new job
      responses:
        '201':
          description: Job created successfully
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
  '/jobs/{id}':
    get:
      tags:
        - jobs
        - recruiter
        - applicant
      summary: Get individual jobs
      description: Single job details
      parameters:
        - $ref: '#/components/parameters/jobId'
      responses:
        '200':
          description: Job retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
    put:
      tags:
        - jobs
        - recruiter
      summary: Edit existing job
      description: Recruiter can edit already existing job
      parameters:
        - $ref: '#/components/parameters/jobId'
      responses:
        '200':
          description: Operation successful
  '/jobs/{id}/save':
    post:
      tags:
        - jobs
        - applicant
      summary: Save job
      description: Save job and apply later
      parameters:
        - $ref: '#/components/parameters/jobId'
      responses:
        '200':
          description: Job saved successfully
  '/jobs/{id}/apply':
    post:
      tags:
        - jobs
        - applicant
      summary: Apply for the job
      description: Apply for the job
      parameters:
        - $ref: '#/components/parameters/jobId'
      responses:
        '200':
          description: Applied for job successfully
  /search:
    get:
      tags:
        - search
        - recruiter
        - applicant
      summary: Search for other linkedin users and jobs
      description: Search for other linkedin users and jobs
      parameters:
        - name: string
          in: query
          description: Search text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  jobs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job' 
  /search/jobs:
    get:
      tags:
        - search
        - recruiter
        - applicant
      summary: Search for jobs
      description: Search for jobs
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Job'
  /search/users:
    get:
      tags:
        - search
        - recruiter
        - applicant
      summary: Search for other linkedin users
      description: Search for other linkedin users
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users:
    get:
      tags: 
        - users
        - recruiter
        - applicant
      summary: Get all users of the system
      description: Get all users of the system
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  applicants:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  recruiters:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
  '/users/{id}':
    get:
      tags:
        - users
        - recruiter
        - applicant
      summary: Get individual user
      description: Individual user details
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - users
        - recruiter
        - applicant
      summary: Edit existing user
      description: Edit existing user
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Operation successful
    delete:
      tags:
        - users
        - recruiter
        - applicant
      summary: Delete existing user
      description: Delete existing user
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: User deleted successfully
  '/users/{id}/connections':
    get:
      tags:
        - users
        - recruiter
        - applicant
      summary: Get all connections of user
      description: Get all connections of user
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Successfully retrived all connections
      
  '/users/{id}/connect':
    post:
      tags:
        - users
        - recruiter
        - applicant
      summary: Connect to other linkedin user
      description: Connect to other linkedin user
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: Connection successful
  '/users/{id}/dashboard':
    get:
      tags:
        - users
        - applicant
        - recruiter
      summary: Get data to populate dashboard of user
      description: Get data to populate info graphics on the dashboard of user
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
  /messages:
    post:
      tags:
      - message
      summary: Create a new thread
      description: Create a new thread for new set of sender and reciever
      responses:
        200:
          description: Thread Created Successfully 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        400:
          description: Cannot create a thread
  /messages/findByUser:
    get:
      tags:
        - message
      summary: Get all the messages for user
      description: Get all the message for any user
      parameters:
        - name: findByUser
          in: query
          description: Inbox of the person logged in
          required: true
          schema:
            type: string
      responses:
        200:
          description: All Conversations Retrieved Successfully 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
        400:
          description: No message found
  '/messages/{id}': 
    get:
      tags:
      - message
      summary: Get all the messages for particular thred
      description: Get all the messages for thread
      parameters:
      - name: id
        in: path
        description: thread id to fetch all the message with a person
        required: true
        schema:
          type: string
      responses:
        200:
          description: Single conversation retrieved Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        400:
          description: No message found
    put:
      tags:
      - message
      summary: Insert a message into a thred
      description: Insert a message into a thread
      parameters:
      - name: id
        in: path
        description: thread id to post the message
        required: true
        schema:
          type: string
      responses:
        200:
          description: Message Posted Successfully 
        400:
          description: No message found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'

components:
  schemas:
    Conversation :
      required:
      - message
      - sender
      - reciever
      - id
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        sender:
          type: string
        reciever:
          type: string
        id:
          type: integer
          format: int64
    Message :
      type: object
      properties:
        sender:
          type: string
        body:
          type: string  
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          $ref: '#/components/schemas/Name'
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        role:
          type: string
        mobile:
          type: integer
          format: int32
        connections:
          type: array
          items:
            $ref: '#/components/schemas/User'
        profile:
          oneOf:
            - $ref: '#/components/schemas/Recruiter'
            - $ref: '#/components/schemas/Applicant'
      required:
        - name
        - email
        - password
        - role
    Recruiter:
      type: object
      properties:
        company:
          type: string
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
    Applicant:
      type: object
      properties:
        experience:
          type: array
          items:
            $ref: '#/components/schemas/Experience'
        education:
          type: array
          items:
            $ref: '#/components/schemas/Education'
        skills:
          type: array
          items:
            type: string
        summary:
          type: string
        resume:
          type: string
        image:
          type: string
          format: binary
        applications:
          type: array
          items:
            $ref: '#/components/schemas/Application'
        saved_jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
    Experience:
      type: object
      properties:
        title:
          type: string
        company:
          type: string
        location:
          type: string
        headline:
          type: string
        description:
          type: string
        date:
          $ref: '#/components/schemas/Date'
    Education:
      type: object
      properties:
        school:
          type: string
        degree:
          type: string
        field:
          type: string
        grade:
          type: string
        description:
          type: string
        date:
          $ref: '#/components/schemas/Date'
    Date:
      type: object
      properties:
        start:
          type: string
          format: date
        end:
          type: string
          format: date
    Job:
      type: object
      properties:
        id:
          type: integer
          format: int64
        owner:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        company:
          type: string
        location:
          type: string
        employment_type:
          type: string
        job_function:
          type: string
        company_logo:
          type: string
        applicant_count:
          type: integer
          format: int64
        applications:
          type: array
          items: 
            $ref: '#/components/schemas/Application'
        view_count:
          type: integer
          format: int64
        skills:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        bookmark_count:
          type: integer
          format: int64
        easy_apply:
          type: boolean
    Name:
      type: object
      properties:
        first:
          type: string
        middle:
          type: string
        last:
          type: string
      required:
        - first
        - last
    Address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        zipcode:
          type: integer
          format: int64
      required:
        - street
        - city
        - state
        - zipcode
    Application:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          $ref: '#/components/schemas/Name'
        address:
          $ref: '#/components/schemas/Address'
        resume:
          type: string
        cover_letter:
          type: string
    Dashboard:
      type: object
      properties:
        view:
          oneOf:
            - $ref: '#/components/schemas/RecruiterDashboard'
            - $ref: '#/components/schemas/ApplicantDashboard'
      required:
        - view
    RecruiterDashboard:
      type: object
      properties:
        hot_job:
          type: array
          items:
            $ref: '#/components/schemas/Graph'
        city_hot_job:
          type: array
          items:
            $ref: '#/components/schemas/Graph'
        cold_job:
          type: array
          items:
            $ref: '#/components/schemas/Graph'
        click_count_job:
          type: array
          items:
            $ref: '#/components/schemas/Graph'
        total_count:
          type: integer
          format: int64
        incomplete_count:
          type: integer
          format: int64
        saved_count:
          type: integer
          format: int64
      required:
        - hot_job
        - city_hot_job
        - cold_job
        - click_count_job
    ApplicantDashboard:
      type: object
      properties:
        profile_view:
          type: array
          items:
            $ref: '#/components/schemas/Graph'
        profile_view_count:
          type: integer
          format: int64
        connection_count:
          type: integer
          format: int64
        applied_count:
          type: integer
          format: int64
        saved_count:
          type: integer
          format: int64
      required:
        - hot_job
        - city_hot_job
        - cold_job
        - click_count_job
    Graph:
      type: object
      properties:
        key:
          type: string
          format: date
        value:
          type: integer
          format: int64

  parameters:
    jobId:
      name: id
      in: path
      description: ID of the job
      required: true
      schema:
        type: integer
        format: int64
    userId:
      name: id
      in: path
      description: ID of the user
      required: true
      schema:
        type: integer
        format: int64